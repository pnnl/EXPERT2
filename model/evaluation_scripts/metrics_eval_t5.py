import pandas as pd
# from sentence_transformers import SentenceTransformer
import glob, os
import json
import numpy as np
from itertools import groupby
import sys
from sklearn import metrics
import logging
logger = logging.getLogger(__name__)

def get_em_accuracy(gold_labels, gen_labels):
    correct = 0
    incorrect = 0
    for gold, gen in zip(gold_labels, gen_labels):
        if gold==gen:
            correct+=1
        else:
            incorrect+=1
    return correct / (correct + incorrect) * 100


def get_alo_accuracy(gold_labels, gen_labels):
    correct = 0
    incorrect = 0
    for gold, gen in zip(gold_labels, gen_labels):
        gold = gold.split(",")
        gen = gen.split(",")
        if len(set(gold).intersection(set(gen))) >0:
            correct+=1
        else:
            incorrect+=1
    return correct / (correct + incorrect) * 100


def get_pm_accuracy(gold_labels, gen_labels):
    correct = 0
    incorrect = 0
    for gold, gen in zip(gold_labels, gen_labels):
        gold = gold.split(",")
        gen = gen.split(",")
        intrsct_len = len(set(gold).intersection(set(gen)))
        if intrsct_len >0:
            correct+= (intrsct_len / len(set(gold)))
        else:
            incorrect+=1
    return correct / (correct + incorrect) * 100

def get_f1_score(gold_labels, gen_labels):
    y_true = gold_labels
    y_pred = gen_labels
    overall_metrics = metrics.classification_report(y_true, y_pred, digits=2,output_dict=True)
    return overall_metrics['weighted avg']['f1-score']


filepath = sys.argv[1]
outpath = sys.argv[2]
input_file = sys.argv[3]
outfile = os.path.splitext(os.path.basename(filepath))[0]
#Load text file 
import json
res_list = []
# Open the text file in read mode
with open(filepath, 'r') as file:
    # Load the JSON object from the file
    for line in file:
        res_list.append(line.split("\n")[0])

df =  pd.read_json(input_file, lines=True)
df['generation'] = res_list
df.to_json(os.path.join(outpath,f"{outfile}.jsonl"), orient='records', lines = True)
# Correct Answers
gold_labels = df['target'].tolist()
# gold_labels = [it[0] for it in gold_labels]

# Answers generated by model
gen_labels = df['generation'].tolist()

metric_res = {}
# gold_labels = ['testA', 'testB,testC', 'testD,testF,testE', 'testX,testY']
# gen_labels =  ['testB', 'testC',       'testD,testF',       'testX,testY,testZ']
metric_res['exact_match'] = [get_em_accuracy(gold_labels, gen_labels)]

metric_res['atleast_one_match'] = [get_alo_accuracy(gold_labels, gen_labels)]

metric_res['weighted_match'] = [get_pm_accuracy(gold_labels, gen_labels)]

metric_res['f1_weighted_avg'] = [get_f1_score(gold_labels, gen_labels)]

res_df = pd.DataFrame(metric_res)

print(metric_res['exact_match'][0])
print(metric_res['atleast_one_match'][0])
print(metric_res['weighted_match'][0])
print(metric_res['f1_weighted_avg'][0])

res_df.to_json(os.path.join(outpath,f"{outfile}_metrics.jsonl"), orient='records', lines = True)
