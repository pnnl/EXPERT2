import pandas as pd
import glob, os
import json
import numpy as np
from itertools import groupby
import sys


def get_em_accuracy(gold_labels, gen_labels):
    correct = 0
    incorrect = 0
    for gold, gen in zip(gold_labels, gen_labels):
        if gold==gen:
            correct+=1
        else:
            incorrect+=1
    return correct / (correct + incorrect) * 100


def get_alo_accuracy(gold_labels, gen_labels):
    correct = 0
    incorrect = 0
    for gold, gen in zip(gold_labels, gen_labels):
        gold = gold.split(",")
        gen = gen.split(",")
        if len(set(gold).intersection(set(gen))) >0:
            correct+=1
        else:
            incorrect+=1
    return correct / (correct + incorrect) * 100


def get_pm_accuracy(gold_labels, gen_labels):
    correct = 0
    incorrect = 0
    for gold, gen in zip(gold_labels, gen_labels):
        gold = gold.split(",")
        gen = gen.split(",")
        intrsct_len = len(set(gold).intersection(set(gen)))
        if intrsct_len >0:
            correct+= (intrsct_len / len(set(gold)))
        else:
            incorrect+=1
    return correct / (correct + incorrect) * 100





filepath = sys.argv[1]
outpath = sys.argv[2]

df =  pd.read_json(filepath, lines=True)

# Correct Answers
gold_labels = df['answers'].tolist()
gold_labels = [it[0] for it in gold_labels]

# Answers generated by model
gen_labels = df['generation'].tolist()

metrics = {}
# gold_labels = ['testA', 'testB,testC', 'testD,testF,testE', 'testX,testY']
# gen_labels =  ['testB', 'testC',       'testD,testF',       'testX,testY,testZ']
metrics['exact_match'] = [get_em_accuracy(gold_labels, gen_labels)]
metrics['atleast_one_match'] = [get_alo_accuracy(gold_labels, gen_labels)]
metrics['weighted_match'] = [get_pm_accuracy(gold_labels, gen_labels)]
print(metrics)

# res_df = pd.DataFrame(metrics)

# outfile = os.path.splitext(os.path.basename(filepath))[0]

# res_df.to_json(os.path.join(outpath,f"{outfile}_metrics.jsonl"), orient='records', lines = True)